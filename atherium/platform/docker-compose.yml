version: '3.8'

services:
  # Main Quantum AI Platform
  quantum-ai-platform:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantum-ai-platform
    ports:
      - "80:80"
      - "8000:8000"
    environment:
      - QUANTUM_AI_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://quantumai:password@postgres:5432/quantumai_db
      - MONGODB_URL=mongodb://mongo:27017/quantumai_mongo
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-quantum_ai_secret_key_change_in_production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-quantum_encryption_key_32_chars}
    volumes:
      - quantum_data:/app/data
      - quantum_logs:/app/logs
      - quantum_uploads:/app/uploads
      - quantum_backups:/app/backups
    depends_on:
      - postgres
      - mongo
      - redis
      - qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - quantum-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantum-postgres
    environment:
      POSTGRES_DB: quantumai_db
      POSTGRES_USER: quantumai
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantumai -d quantumai_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantum-network

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: quantum-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: quantumai
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: quantumai_mongo
    volumes:
      - mongo_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/init.js
    ports:
      - "27017:27017"
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/quantumai_mongo --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantum-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quantum-redis
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantum-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: quantum-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantum-network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    container_name: quantum-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantum-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - quantum-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./docker/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./docker/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=quantum_admin_2025
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - quantum-network

  # MQTT Broker for IoT
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: quantum-mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./docker/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mosquitto_pub", "-h", "localhost", "-t", "test", "-m", "test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quantum-network

  # Nginx Load Balancer (if scaling)
  nginx-lb:
    image: nginx:alpine
    container_name: quantum-nginx-lb
    ports:
      - "443:443"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    restart: unless-stopped
    depends_on:
      - quantum-ai-platform
    networks:
      - quantum-network
    profiles:
      - production

volumes:
  quantum_data:
    driver: local
  quantum_logs:
    driver: local
  quantum_uploads:
    driver: local
  quantum_backups:
    driver: local
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  chromadb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local

networks:
  quantum-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16